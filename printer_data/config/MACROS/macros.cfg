################################################################################################################################################################################################################################################

## Client klipper macro definitions
##
## Copyright (C) 2022 Alex Zellner <alexander.zellner@googlemail.com>
##
## This file may be distributed under the terms of the GNU GPLv3 license
##
## !!! This file is read-only. Maybe the used editor indicates that. !!!
##
## Customization:
##   1) copy the gcode_macro _CLIENT_VARIABLE (see below) to your printer.cfg
##   2) remove the comment mark (#) from all lines
##   3) change any value in there to your needs
##
## Use the PAUSE macro direct in your M600:
##  e.g. with a different park position front left and a minimal height of 50 
##    [gcode_macro M600]
##    description: Filament change
##    gcode: PAUSE X=10 Y=10 Z_MIN=50
##  Z_MIN will park the toolhead at a minimum of 50 mm above to bed to make it easier for you to swap filament.
##
## Client variable macro for your printer.cfg
# [gcode_macro _CLIENT_VARIABLE]
# variable_use_custom_pos   : False ; use custom park coordinates for x,y [True/False]
#variable_custom_park_x    : 0.0   ; custom x position; value must be within your defined min and max of X
#variable_custom_park_y    : 0.0   ; custom y position; value must be within your defined min and max of Y
#variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
#variable_retract          : 1.0   ; the value to retract while PAUSE
#variable_cancel_retract   : 20.0   ; the value to retract while CANCEL_PRINT
#variable_speed_retract    : 35.0  ; retract speed in mm/s
#variable_unretract        : 1.0   ; the value to unretract while RESUME
#variable_speed_unretract  : 35.0  ; unretract speed in mm/s
#variable_speed_hop        : 15.0  ; z move speed in mm/s
#variable_speed_move       : 100.0 ; move speed in mm/s
#variable_park_at_cancel   : False ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
#variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
#variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
#variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
#variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
# gcode:

####################################################################################################################################################################################################################################################
[gcode_macro NEVERMORE_FILTER_CONTROL]
gcode:
    {% if printer.heater_bed.target >= 90 %}
    # {% if target_bed >= 90 %}
    SET_PIN PIN=nevermore_filter VALUE=1
    {% else %}
    SET_PIN PIN=nevermore_filter VALUE=0
    {% endif %}

[gcode_macro HEATSOAK]
variable_heating_active: False

gcode:
  SET_GCODE_VARIABLE MACRO=HEATSOAK VARIABLE=heating_active VALUE=True

  # Activate the Nevermore fan immediately
  SET_PIN PIN=nevermore_filter VALUE=1.0

  # Set bed temperature to initial target of 119 degrees
  M140 S119

  # Monitor temperatures in steps
  G4 S5  # Wait for 5 seconds

  {% if printer["temperature_sensor chamber"].temperature >= 45 %}
    M140 S110  # Set bed temperature to 110 degrees

    # Set idle timeout for one hour (3600 seconds)
    SET_IDLE_TIMEOUT TIME=3600 GCODE=HEATSOAK_CANCEL
  {% elif printer["heater_bed"].temperature < 119 %}
    HEATSOAK  # Restart the macro to check again
  {% endif %}

[gcode_macro HEATSOAK_CANCEL]
gcode:
  SET_GCODE_VARIABLE MACRO=HEATSOAK VARIABLE=heating_active VALUE=False
  M140 S0  # Turn off the bed heater
  SET_PIN PIN=nevermore_filter VALUE=0.0  # Turn off the Nevermore fan


    
# [gcode_macro HEATSOAK]
# variable_heating_active: False

# [gcode_macro HEATSOAK]
# gcode:
#   SET_GCODE_VARIABLE MACRO=HEATSOAK VARIABLE=heating_active VALUE=True

#   # Activate the Nevermore fan immediately
#   SET_PIN PIN=nevermore_filter VALUE=1.0

#   # Set bed temperature to initial target of 119 degrees
#   M140 S119

#   # Monitor temperatures in steps
#   G4 P5000  # Wait for 5 seconds

#   {% if printer["temperature_sensor chamber"].temperature >= 45 %}
#     M140 S110  # Set bed temperature to 110 degrees
#   {% elif printer["heater_bed"].temperature < 119 %}
#     HEATSOAK  # Restart the macro to check again
#   {% endif %}

# [gcode_macro HEATSOAK_CANCEL]
# gcode:
#   SET_GCODE_VARIABLE MACRO=HEATSOAK VARIABLE=heating_active VALUE=False
#   M140 S0  # Turn off the bed heater
#   SET_PIN PIN=nevermore_filter VALUE=0.0  # Turn off the Nevermore fan



[gcode_macro M141]
gcode:
    {% set s = params.S|default(0)|float %}
    SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={s}


#--------------------------------------------------------------------
# [gcode_macro PROBE_CALIBRATE]
# gcode:
#     CARTOGRAPHER_TOUCH CALIBRATE=1

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR               # Unloading net beds
    
      LED_HOMING
      
    G28                            # Homing all axes
     
     LED_LEVELING
     
    QUAD_GANTRY_LEVEL            # Gantry levelling
      
     LED_HOMING
      
    G28                            # Homing all axes
    G0 X150 Y150 Z30 F7200         # 300mm
    #G0 X175 Y175 Z30 F3600         # 350mm

     LED_STANDBY
     
#--------------------------------------------------------------------
# [gcode_macro PAUSE]
# description: Pause the actual running print
# rename_existing: PAUSE_BASE
# # change this if you need more or less extrusion
# variable_extrude: 1.0
# gcode:
#   ##### read E from pause macro #####
#   {% set E = printer["gcode_macro PAUSE"].extrude|float %}
#   ##### set park positon for x and y #####
#   # default is your max posion from your printer.cfg
#   {% set x_park = printer.toolhead.axis_minimum.x|float - 5.0 %}
#   {% set y_park = printer.toolhead.axis_minimum.y|float - 5.0 %}
#   ##### calculate save lift position #####
#   {% set max_z = printer.toolhead.axis_maximum.z|float %}
#   {% set act_z = printer.toolhead.position.z|float %}
#   {% if act_z < (max_z - 2.0) %}
#       {% set z_safe = 2.0 %}
#   {% else %}
#       {% set z_safe = max_z - act_z %}
#   {% endif %}
#   ##### end of definitions #####
#   PAUSE_BASE
#   G91
#   {% if printer.extruder.can_extrude|lower == 'true' %}
#     G1 E-{E} F2100
#   {% else %}
#     {action_respond_info("Extruder not hot enough")}
#   {% endif %}
#   {% if "xyz" in printer.toolhead.homed_axes %}
#     G1 Z{z_safe} F900
#     G90
#     wipe_nozzle
#     G1 X{x_park} Y{y_park} F6000
#   {% else %}
#     {action_respond_info("Printer not homed")}
#   {% endif %} 

# [gcode_macro RESUME]
# description: Resume the actual running print
# rename_existing: RESUME_BASE
# gcode:
#   ##### read E from pause macro #####
#   {% set E = printer["gcode_macro PAUSE"].extrude|float %}
#   #### get VELOCITY parameter if specified ####
#   {% if 'VELOCITY' in params|upper %}
#     {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
#   {%else %}
#     {% set get_params = "" %}
#   {% endif %}
#   ##### end of definitions #####
#   {% if printer.extruder.can_extrude|lower == 'true' %}
#     G91
#     G1 E{E} F2100
#   {% else %}
#     {action_respond_info("Extruder not hot enough")}
#   {% endif %}  
#   RESUME_BASE {get_params}
#--------------------------------------------------------------------

[gcode_macro M117]
rename_existing: M117.1
gcode:
  {% if rawparams %}
    {% set escaped_msg = rawparams.split(';', 1)[0].split('\x23', 1)[0]|replace('"', '\\"') %}
    SET_DISPLAY_TEXT MSG="{escaped_msg}"
    RESPOND TYPE=command MSG="{escaped_msg}"
  {% else %}
    SET_DISPLAY_TEXT
  {% endif %}


#--------------------------------------------------------------------


[gcode_macro PRINT_END]            # Set PRINT_END as the end-of-print macro to customise the after-print action.
gcode:
    M400                           
    G92 E0                         # Zeroing the extruder
    G1 E-6.5 F300              # Retracting the filament
    G91                            # relative position
    G0 Z1.00 X20.0 Y20.0 F6000     # Remove nozzle
  
      # G0 E10 F360                                                               ; extract a bit
      # G0 E5 F3600                                                               ; blob a bit
      # G0 E-22 F3600                                                             ; forming filament Tip for Rapido -> from ERCF V3 ercf_software.cfg 
      # G0 E2 F300
      # G0 E-2.1 F300
      # G0 E2 F300
      # G0 E-2.2 F300
      # G0 E2 F300
      # G0 E-2.3 F300
      # G0 E2 F300
      # G0 E-2.4 F300
      # G0 E2 F300
      # G0 E-2.5 F300
      # G0 E2 F300
      # G0 E-43 F300                                                               ; Filament Tip cooldown till extruder gears for Rapido -> from ERCF V3 ercf_software.cfg  
  
    TURN_OFF_HEATERS               # Close the hot end
    SET_PIN PIN=nevermore_filter VALUE=0
    M107                           # Switch off the fan.
    G1 Z2 F3000                    # Move the nozzle up 2 mm
    G90                            # absolute positioning
  
    wipe_nozzle
    BED_MESH_CLEAR                 # Unloading net beds
    # STATUS_READY
    M204 S23000 

        LED_STANDBY
        
    G0  X150 Y300 F3600            # Park the nozzle at the rear
    G0  X140 Y303 F3600
#--------------------------------------------------------------------
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:

    LED_ERROR

    wipe_nozzle
    
  ## Move head and retract only if not already in the pause state and park set to true
  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 10.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x/2|float - 5.0 %}
  # X=150
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F3600
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}
  G0 X82 Y303
###########################################################################################################################
  
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

###############################################################################################################################################################################################################################################


    # Park front center
[gcode_macro PARKFRONT]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000        
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park top rear left
[gcode_macro PARKREAR]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    
    SAVE_GCODE_STATE NAME=PARKREAR
    {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
    G90                              ; absolute positioning
    # G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000 
    G0 X150 Y302 F6000
    G0 X83 Y303 f3600
    RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro update_git]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh $0"
timeout: 90.0
verbose: True



    