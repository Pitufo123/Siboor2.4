[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE

variable_last_extruder_temp: {'restore': False, 'temp': 0}
variable_restore_idle_timeout: 0
variable_idle_state: False

gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set sp_move = client.speed_move|default(velocity) %}
  {% set runout_resume = True if client.runout_sensor|default("") == ""     # no runout
                    else True if not printer[client.runout_sensor].enabled  # sensor is disabled
                    else printer[client.runout_sensor].filament_detected %}
  {% set can_extrude = True if printer.toolhead.extruder == ''           # no extruder defined in config
                  else printer[printer.toolhead.extruder].can_extrude %}
  {% set do_resume = False %}
  {% set prompt_txt = [] %}

  ##### end of definitions #####
  #### Printer coming from timeout idle state ####
  {% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
    {% if last_extruder_temp.restore %}
      # we need to use the unicode (\u00B0) for the 째 as py2 env's would throw an error otherwise
      RESPOND TYPE=echo MSG='Restoring "{printer.toolhead.extruder}" temperature to {last_extruder_temp.temp}째C, this may take some time'
      M109 S{last_extruder_temp.temp}
      {% set do_resume = True %}
    {% elif can_extrude %}
      {% set do_resume = True %}
    {% else %}
      RESPOND TYPE=error MSG='Resume aborted !!! "{printer.toolhead.extruder}" not hot enough, please heat up again and press RESUME'
      {% set _d = prompt_txt.append("{printer.toolhead.extruder} not hot enough, please heat up again and press RESUME") %}
    {% endif %}

  #### Printer coming out of regular PAUSE state ####
  {% elif can_extrude %}
    {% set do_resume = True %}
  {% else %}
    RESPOND TYPE=error MSG='Resume aborted !!! "{printer.toolhead.extruder}" not hot enough, please heat up again and press RESUME'
    {% set _d = prompt_txt.append("{printer.toolhead.extruder} not hot enough, please heat up again and press RESUME") %}
  {% endif %}

  ##### Only perform nozzle wipe once before resuming #####
  {% if runout_resume and do_resume %}
    wipe_nozzle
    M400  # Ensure all prior commands are completed, especially the wipe
    {client.user_resume_macro|default("")}
    _CLIENT_EXTRUDE
    {% if restore_idle_timeout > 0 %}
      SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout}
    {% endif %} # restore idle_timeout time
    # Call RESUME_BASE only after completing the wipe and extrude actions
    RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
  {% elif not runout_resume %}
    RESPOND TYPE=error MSG='Resume aborted !!! "{client.runout_sensor.split(" ")[1]}" detects no filament, please load filament and press RESUME'
    {% set _d = prompt_txt.append("{client.runout_sensor.split(" ")[1]} detects no filament, please load filament and press RESUME") %}
  {% endif %}

  ##### Generate User Information box in case of abort #####
  {% if not (runout_resume and do_resume) %}
    RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
    {% for element in prompt_txt %}
      RESPOND TYPE=command MSG="action:prompt_text {element}"
    {% endfor %}
    RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
    RESPOND TYPE=command MSG="action:prompt_show"
  {% endif %}



# [gcode_macro RESUME]
# description: Resume the actual running print
# rename_existing: RESUME_BASE

# variable_last_extruder_temp: {'restore': False, 'temp': 0}
# variable_restore_idle_timeout: 0
# variable_idle_state: False

# gcode:
#   ##### get user parameters or use default #####
#   {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
#   {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
#   {% set sp_move = client.speed_move|default(velocity) %}
#   {% set runout_resume = True if client.runout_sensor|default("") == ""     # no runout
#                     else True if not printer[client.runout_sensor].enabled  # sensor is disabled
#                     else printer[client.runout_sensor].filament_detected %}
#   {% set can_extrude = True if printer.toolhead.extruder == ''           # no extruder defined in config
#                   else printer[printer.toolhead.extruder].can_extrude %}
#   {% set do_resume = False %}
#   {% set prompt_txt = [] %}

#   ##### end of definitions #####
#   #### Printer comming from timeout idle state ####
#   {% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
#     SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
#     {% if last_extruder_temp.restore %}
#       # we need to use the unicode (\u00B0) for the 째 as py2 env's would throw an error otherwise
#       RESPOND TYPE=echo MSG='Restoring "{printer.toolhead.extruder}" temperature to {last_extruder_temp.temp}째C, this may take some time'
#       M109 S{last_extruder_temp.temp}
#       wipe_nozzle
#       {% set do_resume = True %}
#     {% elif can_extrude %}
#       wipe_nozzle
#       {% set do_resume = True %}
#     {% else %}
#       RESPOND TYPE=error MSG='Resume aborted !!! "{printer.toolhead.extruder}" not hot enough, please heat up again and press RESUME'
#       {% set _d = prompt_txt.append("{printer.toolhead.extruder} not hot enough, please heat up again and press RESUME") %}
#     {% endif %}

#   #### Printer comming out of regular PAUSE state ####
#   {% elif can_extrude %}
#     wipe_nozzle
#     {% set do_resume = True %}
#   {% else %}
#     RESPOND TYPE=error MSG='Resume aborted !!! "{printer.toolhead.extruder}" not hot enough, please heat up again and press RESUME'
#     {% set _d = prompt_txt.append("{printer.toolhead.extruder} not hot enough, please heat up again and press RESUME") %}
#   {% endif %}

#   {% if runout_resume %}
#     wipe_nozzle
#     {% if do_resume %}
#       {% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout}
#       {% endif %} # restore idle_timeout time
#       {client.user_resume_macro|default("")}
#       _CLIENT_EXTRUDE
#       RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
#     {% endif %}
#   {% else %}
#     RESPOND TYPE=error MSG='Resume aborted !!! "{client.runout_sensor.split(" ")[1]}" detects no filament, please load filament and press RESUME'
#     {% set _d = prompt_txt.append("{client.runout_sensor.split(" ")[1]} detects no filament, please load filament and press RESUME") %}
#   {% endif %}

#   ##### Generate User Information box in case of abort #####
#   {% if not (runout_resume and do_resume) %}
#     RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
#     {% for element in prompt_txt %}
#       RESPOND TYPE=command MSG='action:prompt_text {element}'
#     {% endfor %}
#     RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
#     RESPOND TYPE=command MSG="action:prompt_show"
#   {% endif %}



